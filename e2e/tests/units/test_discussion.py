import unittest
from e2e.main.conf.config import Config
from e2e.main.conf.logger import Logger
from e2e.main.pages.admin.admin_page import AdminPage
from e2e.main.pages.cms.advanced_settings_page import AdvancedSettingsPage
from e2e.main.pages.cms.group_configuration_page import GroupConfigurationPage
from e2e.main.pages.cms.home_page import HomePage
from e2e.main.pages.cms.import_page import ImportPage
from e2e.main.pages.lms.course_page import CoursePage
from e2e.main.pages.lms.courses_page import CoursesPage
from e2e.main.pages.lms.dashboard_page import DashboardPage
from e2e.main.pages.cms.course_outline_page import CourseOutlinePage
from e2e.main.pages.lms.discussion_page import DiscussionPage
from e2e.main.pages.lms.instructor.cohorts_page import CohortsPage
from e2e.main.pages.lms.instructor.discussions_page import DiscussionsPage
from e2e.main.pages.lms.progress_page import ProgressPage
from e2e.main.pages.login_page import LoginPage
from e2e.main.pages.lms.instructor.membership_page import MembershipPage
from e2e.main.pages.cms.shedule_details_page import SheduleDetailsPage
from e2e.main.pages.lms.sysadmin.sysadmin_page import SysadminPage
from e2e.main.tests.main_class import MainClass
from e2e.tests.instructor.test_cohorts import variables

class TestDiscussion(MainClass):
    '''
        Pre-condition: Absent
        Past-condition:
                test_15_delete_all_discussions
            '''

    def setUp(self):
        super(TestDiscussion, self).setUp()
        self.logger = Logger()
        self.config = Config(self.driver)
        self.login_page = LoginPage(self.driver)
        self.cohorts_page = CohortsPage(self.driver)
        self.advanced_settings_page = AdvancedSettingsPage(self.driver)
        self.dashboard_page = DashboardPage(self.driver)
        self.course_outline_page = CourseOutlinePage(self.driver)
        self.membership_page = MembershipPage(self.driver)
        self.shedule_details_page = SheduleDetailsPage(self.driver)
        self.sysadmin_page = SysadminPage(self.driver)
        self.admin_page = AdminPage(self.driver)
        self.courses_page = CoursesPage(self.driver)
        self.course_page = CoursePage(self.driver)
        self.progress_page = ProgressPage(self.driver)
        self.discussion_page = DiscussionPage(self.driver)
        self.discussions_page = DiscussionsPage(self.driver)
        self.group_configuration_page = GroupConfigurationPage(self.driver)
        self.import_page = ImportPage(self.driver)
        self.home_page = HomePage(self.driver)

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_01_add_discussion_on_discussions(self):
        '''Add discussion on discussions'''
        self.logger.do_test_name("Add discussion on discussions")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_DISCUSSION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(4)
            self.discussion_page.click_show_discussions()
            self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
            self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
            self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_02_add_question_on_discussions(self):
        '''Add question on discussions'''
        self.logger.do_test_name("Add question on discussions")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_QUESTION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_03_change_post_by_owner_on_discussions(self):
        '''Change post by owner on discussions'''
        self.logger.do_test_name("Change post by owner on discussions")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_QUESTION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.discussion_page.click_edit_discussion()
        self.discussion_page.input_title(variables.DISCUSSION_TITLE_SECOND + number, variables.STATUS_CHANGE)
        self.discussion_page.input_idea(variables.DISCUSSION_IDEA_SECOND + number, variables.STATUS_CHANGE)
        self.discussion_page.save_changes()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_SECOND + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_SECOND + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_04_change_post_by_not_owner_on_discussions(self):
        '''Change post by not owner on discussions'''
        self.logger.do_test_name("Change post by not owner on discussions")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_QUESTION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_change_post())
        self.config.refresh_page()
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_change_post())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_05_delete_post_by_owner_on_discussions(self):
        '''Delete post by owner on discussions'''
        self.logger.do_test_name("Delete post by owner on discussions")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_QUESTION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.discussion_page.click_delete_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_06_delete_post_by_not_owner_on_discussions(self):
        '''Delete post by not owner on discussions'''
        self.logger.do_test_name("Delete post by not owner on discussions")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_QUESTION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_delete_post())
        self.config.refresh_page()
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_delete_post())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_GIJIMA, "Test doesn't work for Gijima")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_WARDY, "Test doesn't work for Wardy IT")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_SPECTRUM, "Test doesn't work for Spectrum")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_07_visibility_post_by_cohorts_on_discussions(self):
        '''Visibility post by cohorts on discussions'''
        self.logger.do_test_name("Visibility post by cohorts on discussions")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.cohorts_page.openCohorts()
        self.cohorts_page.setCohortsOn()
        cohortName = self.cohorts_page.getCohortName()
        self.cohorts_page.addCohort(cohortName)
        self.config.do_assert_true_in(cohortName + "(0)", self.cohorts_page.get_cohorts_compound())
        self.cohorts_page.assignLearnersCohortsManually(variables.LOGIN_EMAIL_FIRST)
        self.config.do_assert_true_in(cohortName + "(1)", self.cohorts_page.get_cohorts_compound())
        self.cohorts_page.assignLearnersCohortsManually(variables.LOGIN_EMAIL_STAFF)
        self.config.do_assert_true_in(cohortName + "(2)", self.cohorts_page.get_cohorts_compound())
        self.discussions_page.open_discussions()
        self.discussions_page.set_cohorts_on()
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_QUESTION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_ON, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_ON, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_08_add_discussion_on_unit(self):
        '''Add discussion on unit'''
        self.logger.do_test_name("Add discussion on unit")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_DISCUSSION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.course_page.open_unit()
            self.course_page.select_unit(4)
            self.discussion_page.click_show_discussions()
            self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
            self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_09_add_question_on_unit(self):
        '''Add question on unit'''
        self.logger.do_test_name("Add question on unit")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_QUESTION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(4)
            self.discussion_page.click_show_discussions()
            self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
            self.config.do_assert_true_in(variables.STATUS_QUESTION, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_QUESTION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_10_change_post_by_owner_on_unit(self):
        '''Add change post by owner on unit'''
        self.logger.do_test_name("Add change post by owner on unit")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_DISCUSSION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.click_edit_discussion()
        self.discussion_page.input_title(variables.DISCUSSION_TITLE_SECOND + number, variables.STATUS_CHANGE)
        self.discussion_page.input_idea(variables.DISCUSSION_IDEA_SECOND + number, variables.STATUS_CHANGE)
        self.discussion_page.save_changes()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_SECOND + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_SECOND + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_SECOND + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(4)
            self.discussion_page.click_show_discussions()
            self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
            self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_SECOND + number)
            self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
            self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
            self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_SECOND + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_SECOND + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_SECOND + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_11_change_post_by_not_owner_on_unit(self):
        '''Add change post by not owner on unit'''
        self.logger.do_test_name("Add change post by not owner on unit")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_DISCUSSION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_change_post())
        self.config.refresh_page()
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_change_post())
        self.config.refresh_page()
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(4)
            self.discussion_page.click_show_discussions()
            self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
            self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_change_post())
            self.config.refresh_page()
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_change_post())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_12_delete_post_by_owner_on_unit(self):
        '''Delete post by owner on unit'''
        self.logger.do_test_name("Delete post by owner on unit")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_DISCUSSION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.click_delete_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        if (variables.PROJECT not in (variables.PROJECT_GIJIMA + variables.PROJECT_WARDY + variables.PROJECT_SPECTRUM)):
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(4)
            self.discussion_page.click_show_discussions()
            self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
            self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
            self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_deleted_post(variables.DISCUSSION_TITLE_FIRST + number))
        self.config.do_assert_false_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.config.do_assert_false_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_13_delete_post_by_not_owner_on_unit(self):
        '''Delete post by not owner on unit'''
        self.logger.do_test_name("Delete post by not owner on unit")
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_DISCUSSION, variables.DISCUSSION_TITLE_FIRST + number,
                                         variables.DISCUSSION_IDEA_FIRST + number)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_delete_post())
        self.config.refresh_page()
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_delete_post())
        self.config.refresh_page()
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        if (variables.PROJECT not in (variables.PROJECT_GIJIMA + variables.PROJECT_WARDY + variables.PROJECT_SPECTRUM)):
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(4)
            self.discussion_page.click_show_discussions()
            self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
            self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_delete_post())
            self.config.refresh_page()
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true(variables.STATUS_OFF, self.discussion_page.get_possible_delete_post())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUOSPP, "Test doesn't work for ASU OSPP")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_GREEN_HOST, "Test doesn't work for Green Host")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_WARDY, "Test doesn't work for Wardy It")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_GIJIMA, "Test doesn't work for Gijima")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_TBS, "Test doesn't work for Toulouse BS")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_E4H, "Test doesn't work for E4H")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_SPECTRUM, "Test doesn't work for Spectrum")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_14_visibility_post_by_cohorts_on_unit(self):
        '''Visibility post by cohorts on unit'''
        self.logger.do_test_name("Visibility post by cohorts on unit")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_CMS)
        self.course_outline_page.open_created_course(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.group_configuration_page.open_group_configuration()
        groupName = self.group_configuration_page.get_group_name()
        self.group_configuration_page.add_group(groupName)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.cohorts_page.openCohorts()
        self.cohorts_page.setCohortsOn()
        cohortName = self.cohorts_page.getCohortName()
        self.cohorts_page.addCohort(cohortName)
        self.config.do_assert_true_in(cohortName + "(0)", self.cohorts_page.get_cohorts_compound())
        self.cohorts_page.assignLearnersCohortsManually(variables.LOGIN_EMAIL_FIRST)
        self.config.do_assert_true_in(cohortName + "(1)", self.cohorts_page.get_cohorts_compound())
        self.cohorts_page.assignLearnersCohortsManually(variables.LOGIN_EMAIL_STAFF)
        self.config.do_assert_true_in(cohortName + "(2)", self.cohorts_page.get_cohorts_compound())
        self.cohorts_page.add_content_group(groupName)
        self.discussions_page.open_discussions()
        self.discussions_page.set_cohorts_on()
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_CMS)
        self.course_outline_page.open_created_course(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_outline_page.set_content_group(groupName)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        number = self.config.get_random()
        self.discussion_page.create_post(variables.STATUS_DISCUSSION, variables.DISCUSSION_TITLE_FIRST + number, variables.DISCUSSION_IDEA_FIRST + number)
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        if(variables.PROJECT not in variables.PROJECT_ASUSGAB):
            self.discussion_page.open_discussion()
            self.discussion_page.open_all_discussion()
            self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
            self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
            self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
            self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        if (variables.VERSION in variables.VERSION_HAWTHORN):
            self.config.do_assert_false_in(variables.UNIT_NAME_1, self.course_page.get_unit_list_text())
        elif (variables.VERSION in variables.VERSION_GINKO):
            self.course_page.open_subsection()
            self.config.do_assert_false_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        elif (variables.VERSION in variables.VERSION_FIKUS):
            self.config.do_assert_false_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        else:
            print("Incorrect Project")
            self.config.do_assert_true(1, 2)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.discussion_page.click_show_discussions()
        self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
        self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.course_page.get_about_unit_text())
        if (variables.PROJECT not in variables.PROJECT_ASUSGAB):
            self.discussion_page.open_discussion()
            self.discussion_page.open_all_discussion()
            self.discussion_page.open_some_discussion(variables.DISCUSSION_TITLE_FIRST + number)
            self.config.do_assert_true_in(variables.STATUS_DISCUSSION, self.discussion_page.get_discussion_all_text())
            self.config.do_assert_true_in(variables.DISCUSSION_TITLE_FIRST + number, self.discussion_page.get_discussion_all_text())
            self.config.do_assert_true_in(variables.DISCUSSION_IDEA_FIRST + number, self.discussion_page.get_discussion_all_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_ASUSGAB, "Test doesn't work for ASU SGA")
    def test_15_delete_all_discussions(self):
        '''Deleting all discussions'''
        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE, variables.COURSE_RUN)
        self.discussion_page.open_discussion()
        self.discussion_page.open_all_discussion()
        self.discussion_page.delete_all_posts()