import unittest
import time
from e2e.main.conf.config import Config
from e2e.main.conf.logger import Logger
from e2e.main.pages.cms.advanced_settings_page import AdvancedSettingsPage
from e2e.main.pages.cms.import_page import ImportPage
from e2e.main.pages.lms.course_page import CoursePage
from e2e.main.pages.lms.dashboard_page import DashboardPage
from e2e.main.pages.cms.course_outline_page import CourseOutlinePage
from e2e.main.pages.lms.instructor.open_responses_page import OpenResponsesPage
from e2e.main.pages.lms.progress_page import ProgressPage
from e2e.main.pages.lms.sysadmin.sysadmin_page import SysadminPage
from e2e.main.pages.login_page import LoginPage
from e2e.main.pages.lms.instructor.membership_page import MembershipPage
from e2e.main.pages.cms.shedule_details_page import SheduleDetailsPage
from e2e.main.tests.main_class import MainClass
from e2e.tests.instructor.test_cohorts import variables

class TestXblocks(MainClass):
    '''
        Pre-condition:
            test_00_set_up_ora_xblock
        Past-condition:
            test_13_delete_created_courses
        '''

    def setUp(self):
        super(TestXblocks, self).setUp()
        self.logger = Logger()
        self.config = Config(self.driver)
        self.login_page = LoginPage(self.driver)
        self.advanced_settings_page = AdvancedSettingsPage(self.driver)
        self.dashboard_page = DashboardPage(self.driver)
        self.course_outline_page = CourseOutlinePage(self.driver)
        self.membership_page = MembershipPage(self.driver)
        self.shedule_details_page = SheduleDetailsPage(self.driver)
        self.course_page = CoursePage(self.driver)
        self.progress_page = ProgressPage(self.driver)
        self.open_responses_page = OpenResponsesPage(self.driver)
        self.import_page = ImportPage(self.driver)
        self.sysadmin_page = SysadminPage(self.driver)

    def test_00_set_up_ora_xblock(self):
        '''Complete ORA Xblock'''
        self.logger.do_test_name("Complete ORA Xblock")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_CMS)
        self.course_outline_page.open_created_course(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.import_page.open_import()
        self.import_page.import_course(variables.COURSE_ORA)
        self.dashboard_page.logout()

    def test_01_complete_ora_xblock(self):
        '''Complete ORA Xblock'''
        self.logger.do_test_name("Complete ORA Xblock")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_SECOND)
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_SECOND)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_first_block(variables.NAME_FIRST)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_second_block(2, 3, 1, 3)
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.config.do_assert_true(variables.STATUS_OFF, self.course_page.complete_ora_third_block(2, 3))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_first_block(variables.NAME_SECOND)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_second_block(2, 3, 1, 3)
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_third_block(2, 3)
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_fourth_block(1, 1)
        self.config.do_assert_true(4, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.open_responses_page.open_open_responses()
            self.config.do_assert_true_in("Unit_1 Open Response Assessment 2 0 1 0 1 0 0", self.open_responses_page.get_open_responses_text())
            self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_third_block(2, 2)
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_fourth_block(1, 1)
        self.config.do_assert_true(4, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.config.do_assert_true_in(variables.TEXT_6_OF_8, self.course_page.get_about_unit_text())
        self.progress_page.open_progress()
        self.config.do_assert_true_in(variables.TEXT_ANSWER_6, self.progress_page.get_subsection_result_text())
        if (variables.PROJECT not in variables.PROJECT_E4H):
            self.config.do_assert_true_in(variables.TEXT_GRADE_8, self.progress_page.get_grade_result_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true(4, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.config.do_assert_true_in(variables.TEXT_4_OF_8, self.course_page.get_about_unit_text())
        self.progress_page.open_progress()
        self.config.do_assert_true_in(variables.TEXT_ANSWER_4_OF_72, self.progress_page.get_subsection_result_text())
        if (variables.PROJECT not in variables.PROJECT_E4H):
            self.config.do_assert_true_in(variables.TEXT_GRADE_6, self.progress_page.get_grade_result_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(1)
            self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
            self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_FOR)
            self.config.do_assert_true_in(variables.TEXT_IDEAS_FAIR_3_5, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.TEXT_CONTENT_GOOD_3_3, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_FOR)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_BY)
            self.config.do_assert_true_in(variables.TEXT_IDEAS_FAIR_3_5, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.TEXT_CONTENT_FAIR_1_3, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_BY)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SELF_ASSESSMENT)
            self.config.do_assert_true_in(variables.TEXT_IDEAS_POOR_0_5, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.TEXT_CONTENT_POOR_0_3, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SELF_ASSESSMENT)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_FINAL_GRADE)
            self.config.do_assert_true_in(variables.TEXT_6_OF_8, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_FINAL_GRADE)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SUBMIT_ASSESSMENT)
            self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())

            self.course_page.input_learners_email(variables.NAME_SECOND)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
            self.config.do_assert_true_in(variables.NAME_SECOND, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_FOR)
            self.config.do_assert_true_in(variables.TEXT_IDEAS_FAIR_3_5, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.TEXT_CONTENT_FAIR_1_3, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_FOR)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_BY)
            self.config.do_assert_true_in(variables.TEXT_IDEAS_FAIR_3_5, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.TEXT_CONTENT_GOOD_3_3, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_BY)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SELF_ASSESSMENT)
            self.config.do_assert_true_in(variables.TEXT_IDEAS_POOR_0_5, self.course_page.get_about_unit_text())
            self.config.do_assert_true_in(variables.TEXT_CONTENT_POOR_0_3, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SELF_ASSESSMENT)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_FINAL_GRADE)
            self.config.do_assert_true_in(variables.TEXT_4_OF_8, self.course_page.get_about_unit_text())
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_FINAL_GRADE)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SUBMIT_ASSESSMENT)
            self.config.do_assert_true_in(variables.NAME_SECOND, self.course_page.get_about_unit_text())

            self.open_responses_page.open_open_responses()
            self.config.do_assert_true_in("Unit_1 Open Response Assessment 2 0 0 0 0 0 2", self.open_responses_page.get_open_responses_text())
            if (variables.PROJECT not in variables.PROJECT_GREEN_HOST + variables.PROJECT_DIMINGWAY):
                self.open_responses_page.open_some_response_assessment()
                self.config.do_assert_true(0, self.open_responses_page.get_open_responses_text().count(variables.TEXT_COMPLETE))
                self.config.do_assert_true(1, self.open_responses_page.get_open_responses_text().count(variables.TEXT_IN_PROGRESS))
                self.config.do_assert_true(3, self.open_responses_page.get_open_responses_text().count(variables.TEXT_NOT_AVAILABLE))
                self.open_responses_page.click_back_to_full_list()
                self.config.do_assert_true_in("Unit_1 Open Response Assessment 2 0 0 0 0 0 2", self.open_responses_page.get_open_responses_text())

    @unittest.skipIf(variables.PROJECT == variables.PROJECT_GIJIMA, "Test doesn't work for Gijima")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_WARDY, "Test doesn't work for Wardy IT")
    @unittest.skipIf(variables.PROJECT == variables.PROJECT_SPECTRUM, "Test doesn't work for Spectrum")
    def test_02_complete_ora_xblock_with_staff_assessment(self):
        '''Complete ORA Xblock with staff assessment'''
        self.logger.do_test_name("Complete ORA Xblock with staff assessment")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_CMS)
        self.course_outline_page.open_created_course(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.import_page.open_import()
        self.import_page.import_course(variables.COURSE_ORA)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_SECOND)
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_SECOND)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(4, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_first_block(variables.NAME_FIRST)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_second_block(2, 3, 1, 3)
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.config.do_assert_true(variables.STATUS_OFF, self.course_page.complete_ora_third_block(2, 3))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(4, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_first_block(variables.NAME_SECOND)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_second_block(2, 3, 1, 3)
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_third_block(2, 3)
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_fourth_block(1, 1)
        self.config.do_assert_true(4, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_third_block(2, 2)
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_fourth_block(1, 1)
        self.config.do_assert_true(4, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.open_responses_page.open_open_responses()
        self.config.do_assert_true_in("Unit_2 Open Response Assessment 2 0 0 0 0 2 0", self.open_responses_page.get_open_responses_text())

        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.course_page.click_grade_available_responses()
        self.config.do_assert_true_in(variables.TEXT_AVAILABLE_2_0, self.course_page.get_about_unit_text())
        self.course_page.click_staff_assessment()
        self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())
        self.course_page.complete_ora_fifth_block(3, 4)
        self.config.do_assert_true_in(variables.TEXT_AVAILABLE_0_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.NAME_SECOND, self.course_page.get_about_unit_text())
        self.course_page.complete_ora_fifth_block(1, 2)

        self.course_page.click_manage_individual_learners()
        self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
        self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_FOR)
        self.config.do_assert_true_in(variables.TEXT_IDEAS_FAIR_3_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.TEXT_CONTENT_GOOD_3_3, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_FOR)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_BY)
        self.config.do_assert_true_in(variables.TEXT_IDEAS_FAIR_3_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.TEXT_CONTENT_FAIR_1_3, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_BY)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SELF_ASSESSMENT)
        self.config.do_assert_true_in(variables.TEXT_IDEAS_POOR_0_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.TEXT_CONTENT_POOR_0_3, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SELF_ASSESSMENT)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_STAFF_ASSESSMENT)
        self.config.do_assert_true_in(variables.TEXT_IDEAS_GOOD_5_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.TEXT_CONTENT_EXCELLENT_3_3, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_STAFF_ASSESSMENT)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_FINAL_GRADE)
        self.config.do_assert_true_in(variables.TEXT_8_OF_8, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_FINAL_GRADE)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SUBMIT_ASSESSMENT)
        self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())

        self.course_page.input_learners_email(variables.NAME_SECOND)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
        self.config.do_assert_true_in(variables.NAME_SECOND, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_FOR)
        self.config.do_assert_true_in(variables.TEXT_IDEAS_FAIR_3_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.TEXT_CONTENT_FAIR_1_3, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_FOR)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_BY)
        self.config.do_assert_true_in(variables.TEXT_IDEAS_FAIR_3_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.TEXT_CONTENT_GOOD_3_3, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_PEER_ASSESSMENTS_BY)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SELF_ASSESSMENT)
        self.config.do_assert_true_in(variables.TEXT_IDEAS_POOR_0_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.TEXT_CONTENT_POOR_0_3, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SELF_ASSESSMENT)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_STAFF_ASSESSMENT)
        self.config.do_assert_true_in(variables.TEXT_IDEAS_POOR_0_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.TEXT_CONTENT_FAIR_1_3, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_STAFF_ASSESSMENT)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_FINAL_GRADE)
        self.config.do_assert_true_in(variables.TEXT_1_OF_8, self.course_page.get_about_unit_text())
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_FINAL_GRADE)
        self.course_page.click_ora_staff_viewing(variables.PATH_ORA_SUBMIT_ASSESSMENT)
        self.config.do_assert_true_in(variables.NAME_SECOND, self.course_page.get_about_unit_text())
        self.open_responses_page.open_open_responses()
        self.config.do_assert_true_in("Unit_2 Open Response Assessment 2 0 0 0 0 0 2", self.open_responses_page.get_open_responses_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.config.do_assert_true(5, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.config.do_assert_true_in(variables.TEXT_8_OF_8, self.course_page.get_about_unit_text())
        self.progress_page.open_progress()
        self.config.do_assert_true_in(variables.TEXT_ANSWER_8_OF_72, self.progress_page.get_subsection_result_text())
        if (variables.PROJECT not in variables.PROJECT_E4H):
            self.config.do_assert_true_in(variables.TEXT_GRADE_11, self.progress_page.get_grade_result_text())
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_SECOND, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.config.do_assert_true(5, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.config.do_assert_true_in(variables.TEXT_1_OF_8, self.course_page.get_about_unit_text())
        self.progress_page.open_progress()
        self.config.do_assert_true_in(variables.TEXT_ANSWER_1_72, self.progress_page.get_subsection_result_text())
        if (variables.PROJECT not in variables.PROJECT_E4H):
            self.config.do_assert_true_in(variables.TEXT_GRADE_1, self.progress_page.get_grade_result_text())

    def test_03_save_answer(self):
        '''Save answer for ORA Xblock'''
        self.logger.do_test_name("Save answer for ORA Xblock")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.course_page.input_ora_first_block(variables.NAME_FIRST)
        self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_ora_text())
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.EMPTY, self.course_page.get_ora_text())
        self.course_page.input_ora_first_block(variables.NAME_FIRST)
        self.course_page.click_save_ora_first_block()
        self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_ora_text())
        self.course_page.select_unit(2)
        self.config.do_assert_true_in(variables.UNIT_NAME_2, self.course_page.get_about_unit_text())
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_ora_text())

    def test_04_complete_ora_xblock_without_add_optional_pdf(self):
        '''Complete ORA Xblock without add optional pdf'''
        self.logger.do_test_name("Complete ORA Xblock without add optional pdf")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(3)
        self.config.do_assert_true_in(variables.UNIT_NAME_3, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(3)
        self.config.do_assert_true_in(variables.UNIT_NAME_3, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_first_block(variables.NAME_FIRST)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.PROJECT not in (variables.PROJECT_GIJIMA + variables.PROJECT_WARDY + variables.PROJECT_SPECTRUM)):
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(3)
            self.config.do_assert_true_in(variables.UNIT_NAME_3, self.course_page.get_about_unit_text())
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
            self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())

    def test_05_complete_ora_xblock_without_add_optional_image(self):
        '''Complete ORA Xblock without add optional image'''
        self.logger.do_test_name("Complete ORA Xblock without add optional image")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.config.do_assert_true_in(variables.UNIT_NAME_4, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(4)
        self.config.do_assert_true_in(variables.UNIT_NAME_4, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_first_block(variables.NAME_FIRST)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(4)
            self.config.do_assert_true_in(variables.UNIT_NAME_4, self.course_page.get_about_unit_text())
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
            self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())

    def test_06_complete_ora_xblock_without_add_optional_doc(self):
        '''Complete ORA Xblock without add optional doc'''
        self.logger.do_test_name("Complete ORA Xblock without add optional doc")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(5)
        self.config.do_assert_true_in(variables.UNIT_NAME_5, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(5)
        self.config.do_assert_true_in(variables.UNIT_NAME_5, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_first_block(variables.NAME_FIRST)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(5)
            self.config.do_assert_true_in(variables.UNIT_NAME_5, self.course_page.get_about_unit_text())
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
            self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())

    def test_07_complete_ora_xblock_without_add_required_pdf(self):
        '''Complete ORA Xblock without add required pdf'''
        self.logger.do_test_name("Complete ORA Xblock without add required pdf")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(6)
        self.config.do_assert_true_in(variables.UNIT_NAME_6, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(6)
        self.config.do_assert_true_in(variables.UNIT_NAME_6, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.input_ora_first_block(variables.NAME_FIRST)
        time.sleep(5)
        self.config.do_assert_true(variables.STATUS_OFF, self.course_page.get_clicable_submit_ora_first_block())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()
        self.driver.switch_to_alert().accept()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(6)
            self.config.do_assert_true_in(variables.UNIT_NAME_6, self.course_page.get_about_unit_text())
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.config.do_assert_true_in(variables.TEXT_RESPONSE_WASNT_FOUND_LEARNER, self.course_page.get_about_unit_text())

    def test_08_complete_ora_xblock_without_add_required_image(self):
        '''Complete ORA Xblock without add required image'''
        self.logger.do_test_name("Complete ORA Xblock without add required image")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(7)
        self.config.do_assert_true_in(variables.UNIT_NAME_7, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(7)
        self.config.do_assert_true_in(variables.UNIT_NAME_7, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.input_ora_first_block(variables.NAME_FIRST)
        time.sleep(5)
        self.config.do_assert_true(variables.STATUS_OFF, self.course_page.get_clicable_submit_ora_first_block())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()
        self.driver.switch_to_alert().accept()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(7)
            self.config.do_assert_true_in(variables.UNIT_NAME_7, self.course_page.get_about_unit_text())
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.config.do_assert_true_in(variables.TEXT_RESPONSE_WASNT_FOUND_LEARNER, self.course_page.get_about_unit_text())

    def test_09_complete_ora_xblock_without_add_required_doc(self):
        '''Complete ORA Xblock without add required doc'''
        self.logger.do_test_name("Complete ORA Xblock without add required doc")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(8)
        self.config.do_assert_true_in(variables.UNIT_NAME_8, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(8)
        self.config.do_assert_true_in(variables.UNIT_NAME_8, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.input_ora_first_block(variables.NAME_FIRST)
        time.sleep(5)
        self.config.do_assert_true(variables.STATUS_OFF, self.course_page.get_clicable_submit_ora_first_block())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()
        self.driver.switch_to_alert().accept()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(8)
            self.config.do_assert_true_in(variables.UNIT_NAME_8, self.course_page.get_about_unit_text())
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.config.do_assert_true_in(variables.TEXT_RESPONSE_WASNT_FOUND_LEARNER, self.course_page.get_about_unit_text())

    def test_10_delete_answer_by_staff(self):
        '''Delete answer by staff'''
        self.logger.do_test_name("Delete answer by staff")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                               variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.course_page.complete_ora_first_block(variables.NAME_FIRST)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.course_page.delete_user_answer(variables.LOGIN_EMAIL_FIRST)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.course_page.select_unit(1)
        self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.dashboard_page.open_created_cours(variables.ORGANIZATION, variables.COURSE_NUMBER_POSITIVE,
                                                     variables.COURSE_RUN)
            self.open_responses_page.open_open_responses()
            self.config.do_assert_true_in("Unit_1 Open Response Assessment 0 0 0 0 0 0 0", self.open_responses_page.get_open_responses_text())
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.select_unit(1)
            self.config.do_assert_true_in(variables.UNIT_NAME_1, self.course_page.get_about_unit_text())
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.config.do_assert_true_in(variables.TEXT_RESPONSE_WASNT_FOUND_LEARNER, self.course_page.get_about_unit_text())

    def test_11_set_up_ora_xblock_with_all_none(self):
        '''Set up ora xblock with all none'''
        self.logger.do_test_name("Set up ora xblock with all none")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_CMS)
        courseName = variables.COURSE_NAME
        organization = variables.ORGANIZATION_FOR_DELETE
        courseNumber = self.config.get_course_number()
        courseRun = variables.COURSE_RUN
        self.course_outline_page.create_course(courseName, organization, courseNumber, courseRun)
        self.advanced_settings_page.open_advanced_settings()
        self.advanced_settings_page.set_value_advanced_setting(variables.PATH_CATALOG_VISIBILITY, variables.STATUS_NONE)
        self.course_outline_page.open_outline()
        self.course_outline_page.add_section(variables.SECTION_NAME_1)
        self.course_outline_page.add_subsection(variables.SUBSECTION_NAME_1)
        self.config.do_assert_true(variables.STATUS_OFF, self.course_outline_page.add_ora(variables.UNIT_NAME_1, variables.EMPTY,
                                                                                          variables.BLOCK_ORA, variables.STATUS_NONE,
                                                                                          variables.STATUS_NONE, variables.STATUS_PDF,
                                                                                          variables.NUMBER_1, variables.NUMBER_1, variables.STATUS_OFF)
        )

    def test_12_set_up_ora_xblock_with_all_optional(self):
        '''Set up ora xblock with all optional'''
        self.logger.do_test_name("Set up ora xblock with all optional")
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_CMS)
        courseName = variables.COURSE_NAME
        organization = variables.ORGANIZATION_FOR_DELETE
        courseNumber = self.config.get_course_number()
        courseRun = variables.COURSE_RUN
        self.course_outline_page.create_course(courseName, organization, courseNumber, courseRun)
        self.course_outline_page.add_section(variables.SECTION_NAME_1)
        self.course_outline_page.add_subsection(variables.SUBSECTION_NAME_1)
        self.course_outline_page.add_ora(variables.UNIT_NAME_1, variables.EMPTY, variables.BLOCK_ORA, variables.STATUS_OPTIONAL, variables.STATUS_OPTIONAL, variables.STATUS_PDF, variables.NUMBER_1, variables.NUMBER_1, variables.STATUS_OFF)
        self.advanced_settings_page.open_advanced_settings()
        self.advanced_settings_page.set_value_advanced_setting(variables.PATH_CATALOG_VISIBILITY, variables.STATUS_NONE)
        self.shedule_details_page.open_shedule_details()
        self.shedule_details_page.input_date(variables.DATE_BEFORE_TODAY_01, variables.DATE_BEFORE_TODAY_02,
                                             variables.DATE_BEFORE_TODAY_01, variables.DATE_BEFORE_TODAY_02)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(organization, courseNumber, courseRun)
        self.membership_page.open_membership()
        self.membership_page.enroll_user(variables.LOGIN_EMAIL_FIRST, "1", variables.STATUS_ENROLL, False, False)
        self.membership_page.enroll_user(variables.LOGIN_EMAIL_SECOND, "1", variables.STATUS_ENROLL, False, False)
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_FIRST, variables.LOGIN_PASSWORD, variables.STATUS_LMS)
        self.dashboard_page.open_created_cours(organization, courseNumber, courseRun)
        self.course_page.open_course()
        self.course_page.open_unit()
        self.config.do_assert_true(0, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(3, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.config.do_assert_true(variables.STATUS_OFF, self.course_page.get_clicable_submit_ora_first_block())
        self.course_page.complete_ora_first_block(variables.NAME_FIRST)
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_COMPLETE))
        self.config.do_assert_true(1, self.course_page.get_about_unit_text().count(variables.TEXT_IN_PROGRESS))
        self.config.do_assert_true(2, self.course_page.get_about_unit_text().count(variables.TEXT_NOT_AVAILABLE))
        self.dashboard_page.logout()

        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        if (variables.VERSION not in variables.VERSION_FIKUS):
            self.dashboard_page.open_created_cours(organization, courseNumber, courseRun)
            self.course_page.open_course()
            self.course_page.open_unit()
            self.course_page.click_manage_individual_learners()
            self.course_page.input_learners_email(variables.LOGIN_EMAIL_FIRST)
            self.course_page.click_ora_staff_viewing(variables.PATH_ORA_LEARNERS_RESPONSE)
            self.config.do_assert_true_in(variables.NAME_FIRST, self.course_page.get_about_unit_text())

    def test_13_delete_created_courses(self):
        '''Deleting all created courses'''
        self.login_page.login(variables.LOGIN_EMAIL_STAFF, variables.LOGIN_PASSWORD_STAFF, variables.STATUS_LMS)
        self.sysadmin_page.open_courses()
        self.sysadmin_page.delete_created_courses()